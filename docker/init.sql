CREATE DATABASE "DIGITAL-UBS-DB";

CREATE TABLE USERS
(
    ID SERIAL PRIMARY KEY,
    CPF VARCHAR(14),
    CRATEDATE TIMESTAMP,
    LASTENTRY TIMESTAMP,
    ACTIVE BOOLEAN
);

CREATE TABLE TI_ADMIN
(
    ID INT REFERENCES USERS(ID),
    NAME VARCHAR(75)
);

CREATE TABLE ADDRESS
(
    ID SERIAL PRIMARY KEY,
    DISTRICT VARCHAR(50),
    STREET VARCHAR(50),
    NUMBER INT
);

CREATE TABLE PATIENT
(
    ID INT REFERENCES USERS(ID),
    FEDERALCODE INT
);

CREATE TABLE DRUG
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50),
    LEAFLET VARCHAR(1000),
    RECORDNUMBER VARCHAR(13)
);

CREATE TABLE HEALTH_SECRETARY
(
    ID INT REFERENCES USERS(ID),
    CREATEDBYID INT REFERENCES TI_ADMIN(ID),
    NAME VARCHAR(75)
);

CREATE TABLE UNIT
(
    ID SERIAL PRIMARY KEY,
    ADDRESSID INT REFERENCES ADDRESS(ID),
    OPENINGTIME TIME,
    CLOSINGTIME TIME,
    ACTIVE BOOLEAN
);

CREATE TABLE UBS_SECRETARY
(
    ID INT REFERENCES USERS(ID),
    UNITIID INT REFERENCES UNIT(ID),
    CREATEDBYSECRETARYID INT REFERENCES HEALTH_SECRETARY(ID),
    NAME VARCHAR(75)
);

CREATE TABLE NOTIFICATION
(
    ID SERIAL PRIMARY KEY,
    CREATEDBYID INT REFERENCES HEALTH_SECRETARY(ID),
    FORALL BOOLEAN,
    NAME VARCHAR(30),
    DESCRIPTION VARCHAR(300),
    STARTDATE TIMESTAMP,
    ENDDATE TIMESTAMP
);

CREATE TABLE NOTIFICATION_UNIT
(
    CAMPAIGNID INT REFERENCES NOTIFICATION(ID),
    UNITIID INT REFERENCES UNIT(ID)
);

CREATE TABLE SCHEDULING_ORDERS
(
    ID SERIAL PRIMARY KEY,
    PATIENTID INT REFERENCES PATIENT(ID),
    UNITID INT REFERENCES UNIT(ID),
    DATE TIMESTAMP,
    APPROVED BOOLEAN
);

CREATE TABLE DRUG_CLAIM
(
    ID SERIAL PRIMARY KEY,
    USERID INT REFERENCES PATIENT(ID),
    DRUGID INT REFERENCES DRUG(ID),
    DAYSINTERVAL INT,
    LASTCLAIM TIMESTAMP,
    RECURRENT BOOLEAN
);

CREATE TABLE FEEDBACK_TYPE
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50)
);

CREATE TABLE FEEDBACK
(
    ID SERIAL PRIMARY KEY,
    SCHEDULINGID INT REFERENCES SCHEDULING_ORDERS(ID),
    FEEDBACKTYPEID INT REFERENCES FEEDBACK_TYPE(ID),
    RATE BOOLEAN,
    DESCRIPTION VARCHAR(200)
);


-- Trigger de auditoria
CREATE OR REPLACE FUNCTION audit_scheduling_orders()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.approved = FALSE THEN
        INSERT INTO order_refused (scheduling_order_id, refused_date)
        VALUES (NEW.id, NOW());
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER t_audit_scheduling_orders
AFTER UPDATE ON scheduling_orders
FOR EACH ROW
EXECUTE FUNCTION audit_scheduling_orders();